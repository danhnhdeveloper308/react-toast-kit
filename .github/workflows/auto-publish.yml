name: Auto Publish to NPM

on:
  push:
    branches:
      - main
    paths-ignore:
      - '*.md'
      - '.gitignore'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      version_number:
        description: 'Specific version number (optional, overrides version_type)'
        required: false
        type: string
      force_publish:
        description: 'Force publish even without source changes'
        required: false
        default: true
        type: boolean
  release:
    types: [published]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  auto-publish:
    runs-on: ubuntu-latest
    # Remove the specific repository check to allow any fork to use this
    
    permissions:
      contents: write
      id-token: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # Use a specific PAT with write permissions
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Get current npm version
        id: get-npm-version
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          
          # Check if package exists on npm
          if npm view $PACKAGE_NAME version > /dev/null 2>&1; then
            NPM_VERSION=$(npm view $PACKAGE_NAME version)
            echo "npm-version=$NPM_VERSION" >> $GITHUB_OUTPUT
            echo "package-exists=true" >> $GITHUB_OUTPUT
            echo "NPM version found: $NPM_VERSION"
          else
            echo "npm-version=0.0.0" >> $GITHUB_OUTPUT
            echo "package-exists=false" >> $GITHUB_OUTPUT
            echo "Package not found on npm, will start from 1.0.0"
          fi

      - name: Get current local version
        id: get-version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Local version: $CURRENT_VERSION"

      - name: Check if should publish
        id: check-publish
        run: |
          # Always default to publishing for manual workflow dispatch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-publish=true" >> $GITHUB_OUTPUT
            echo "Manual workflow trigger, will publish regardless of changes"
            exit 0
          fi
          
          # For push events
          SHOULD_PUBLISH=true
          
          # Check for force publish from workflow dispatch
          if [[ "${{ github.event.inputs.force_publish }}" == "true" ]]; then
            echo "Force publish enabled via workflow dispatch, will publish"
          # Check for special commit message to force publish
          elif git log -1 --pretty=%B | grep -i "added --frozen-lockfile\|--no-frozen-lockfile\|bump\|version\|publish\|release" > /dev/null; then
            echo "Detected versioning-related commit, forcing publish"
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "Push to main branch, publishing"
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            echo "Release event, will publish"
          fi
          
          echo "should-publish=$SHOULD_PUBLISH" >> $GITHUB_OUTPUT

      - name: Calculate new version intelligently
        id: calculate-version
        if: steps.check-publish.outputs.should-publish == 'true'
        run: |
          NPM_VERSION="${{ steps.get-npm-version.outputs.npm-version }}"
          LOCAL_VERSION="${{ steps.get-version.outputs.current-version }}"
          PACKAGE_EXISTS="${{ steps.get-npm-version.outputs.package-exists }}"
          
          echo "NPM Version: $NPM_VERSION"
          echo "Local Version: $LOCAL_VERSION"
          echo "Package exists on npm: $PACKAGE_EXISTS"
          
          # Function to compare versions
          version_compare() {
            if [[ $1 == $2 ]]; then
              echo "equal"
            elif [[ $1 = $(echo -e "$1\n$2" | sort -V | head -n1) ]]; then
              echo "less"
            else
              echo "greater"
            fi
          }
          
          # Function to increment version
          increment_version() {
            local version=$1
            local type=$2
            
            IFS='.' read -ra PARTS <<< "$version"
            local major=${PARTS[0]}
            local minor=${PARTS[1]}
            local patch=${PARTS[2]}
            
            case $type in
              "major")
                major=$((major + 1))
                minor=0
                patch=0
                ;;
              "minor")
                minor=$((minor + 1))
                patch=0
                ;;
              "patch"|*)
                patch=$((patch + 1))
                ;;
            esac
            
            echo "$major.$minor.$patch"
          }
          
          # Manual workflow with specified version
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.version_number }}" ]]; then
            NEW_VERSION="${{ github.event.inputs.version_number }}"
            echo "Using specific version from input: $NEW_VERSION"
            
            # Validate version format
            if [[ ! $NEW_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "Error: Invalid version format. Use semantic versioning (e.g., 1.2.3)"
              exit 1
            fi
          # Manual workflow with version type
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION_TYPE="${{ github.event.inputs.version_type }}"
            NEW_VERSION=$(increment_version "$LOCAL_VERSION" "$VERSION_TYPE")
            echo "Incrementing $VERSION_TYPE version from local: $NEW_VERSION"
          # Auto increment for regular pushes
          else
            # Always increment patch version for automated pushes
            NEW_VERSION=$(increment_version "$LOCAL_VERSION" "patch")
            echo "Auto-incrementing patch version: $NEW_VERSION"
          fi
          
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Final calculated version: $NEW_VERSION"

      - name: Update package.json version
        if: steps.check-publish.outputs.should-publish == 'true'
        run: |
          NEW_VERSION="${{ steps.calculate-version.outputs.new-version }}"
          CURRENT_VERSION="${{ steps.get-version.outputs.current-version }}"
          
          echo "Updating package.json from $CURRENT_VERSION to version: $NEW_VERSION"
          
          # Use node.js to update package.json directly
          node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            pkg.version = '$NEW_VERSION';
            fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
          "
          
          # Verify the update
          UPDATED_VERSION=$(node -p "require('./package.json').version")
          if [[ "$UPDATED_VERSION" != "$NEW_VERSION" ]]; then
            echo "Error: Version update failed. Expected $NEW_VERSION but got $UPDATED_VERSION"
            exit 1
          fi
          
          echo "✅ Successfully updated version to $NEW_VERSION"

      - name: Lint code
        if: steps.check-publish.outputs.should-publish == 'true'
        run: |
          echo "Running linter..."
          pnpm lint || {
            echo "Linting completed with warnings, continuing..."
          }

      - name: Build package
        if: steps.check-publish.outputs.should-publish == 'true'
        run: |
          echo "Building package..."
          pnpm build || {
            echo "❌ Build failed"
            exit 1
          }
          echo "✅ Build completed successfully"

      - name: Run tests
        if: steps.check-publish.outputs.should-publish == 'true'
        run: |
          echo "Running tests..."
          if pnpm test run 2>/dev/null || pnpm test --run 2>/dev/null || pnpm test 2>/dev/null; then
            echo "✅ Tests passed"
          else
            echo "⚠️ No test files found or tests failed, continuing..."
          fi

      - name: Publish to npm
        if: steps.check-publish.outputs.should-publish == 'true'
        run: |
          NEW_VERSION="${{ steps.calculate-version.outputs.new-version }}"
          echo "Publishing version $NEW_VERSION to npm..."
          
          # Setup .npmrc file to use NODE_AUTH_TOKEN
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > .npmrc
          echo "registry=https://registry.npmjs.org/" >> .npmrc
          echo "always-auth=true" >> .npmrc
          
          # Publish with access public flag
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create git tag and push
        if: steps.check-publish.outputs.should-publish == 'true'
        run: |
          NEW_VERSION="${{ steps.calculate-version.outputs.new-version }}"
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Commit version change
          git add package.json
          git commit -m "chore: bump version to v$NEW_VERSION [skip ci]" || echo "No changes to commit"
          
          # Create and push tag
          git tag "v$NEW_VERSION"
          
          # Try pushing with different authentication methods
          echo "Pushing changes back to repository..."
          git push || git push https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git HEAD:main
          git push --tags || git push --tags https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          
          echo "Created and pushed tag v$NEW_VERSION"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        if: steps.check-publish.outputs.should-publish == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.calculate-version.outputs.new-version }}
          release_name: Release v${{ steps.calculate-version.outputs.new-version }}
          body: |
            ## 🚀 Version ${{ steps.calculate-version.outputs.new-version }}
            
            Auto-published from workflow run
            
            ### 📦 Package Information
            - **NPM**: https://www.npmjs.com/package/react-toast-kit
            - **GitHub**: ${{ github.server_url }}/${{ github.repository }}
            
            ### 🔄 Changes
            - Version bump to ${{ steps.calculate-version.outputs.new-version }}
            - Latest changes from main branch
            
            ### 📥 Installation
            ```bash
            npm install react-toast-kit
            # or
            pnpm add react-toast-kit
            # or  
            yarn add react-toast-kit
            ```
          draft: false
          prerelease: false

      - name: Summary
        if: steps.check-publish.outputs.should-publish == 'true'
        run: |
          NEW_VERSION="${{ steps.calculate-version.outputs.new-version }}"
          echo "## 🎉 Successfully Published!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Package**: react-toast-kit" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: $NEW_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **NPM**: https://www.npmjs.com/package/react-toast-kit" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Release**: ${{ github.server_url }}/${{ github.repository }}/releases/tag/v$NEW_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Installation" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "npm install react-toast-kit@$NEW_VERSION" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Skip publish summary
        if: steps.check-publish.outputs.should-publish != 'true'
        run: |
          echo "## ⏭️ Publish Skipped" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "No source code changes detected or conditions not met for publishing." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Trigger publish manually:" >> $GITHUB_STEP_SUMMARY
          echo "- Go to Actions → Auto Publish to NPM → Run workflow" >> $GITHUB_STEP_SUMMARY
          echo "- Or make changes to files in src/ directory"